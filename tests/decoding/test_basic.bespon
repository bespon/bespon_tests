# Copyright (c) 2017, Geoffrey M. Poore
# License:  Creative Commons Attribution 4.0 International Public License
#           https://creativecommons.org/licenses/by/4.0/legalcode
#
# These tests provide a quick check of whether a variety of valid structures
# can be loaded.  This is primarily meant for use during the early stages
# of writing a decoder, largely as a way to quickly determine which
# data types can and cannot be loaded.


|=== test_root_scalar
status = valid
bespon = ['none', 'true', 'false',
          '1', '0b101',
          '0o777', '0x0af',
          '1.0', '1e5', '1.1e1',
          'inf', '+inf', '-inf',
          'nan', '0xa.fp2',
          'string', 'string string',
          "'string'", "'string\nstring'",
          '"string"', '"string\nstring"',
          '`string`', '`string\nstring`',
          "|'''\nstring\n|'''/\n",
          '|"""\nstring\n|"""/\n',
          '|```\nstring\n|```/\n']
json =   ['null', 'true', 'false',
          `[":int64", "1"]`, `[":int64:2", "0b101"]`,
          `[":int64:8", "0o777"]`, `[":int64:16", "0x0af"]`,
          `[":float64", "1.0"]`, `[":float64", "1e5"]`, `[":float64", "1.1e1"]`,
          `[":float64", "inf"]`, `[":float64", "+inf"]`, `[":float64", "-inf"]`,
          `[":float64", "nan"]`, `[":float64:16", "0xa.fp2"]`,
          '"string"', '"string string"',
          '"string"', `"string string"`,
          '"string"', `"string string"`,
          '"string"', `"string string"`,
          `"string\n"`,
          `"string\n"`,
          `"string\n"`]


|=== test_root_noninline_dict
status = valid
bespon = |'''
         key = value
         another_key = another_value
         |'''/
json = `{"key": "value", "another_key": "another_value"}`


|=== test_root_inline_dict
status = valid
bespon = |'''
         {key = value,
          another_key = another_value}
         |'''/
json = `{"key": "value", "another_key": "another_value"}`


|=== test_root_noninline_list
status = valid
bespon = |'''
         * value
         * another value
         |'''/
json = `["value", "another value"]`


|=== test_root_inline_list
status = valid
bespon = |'''
         [value,
          another value]
         |'''/
json = `["value", "another value"]`


|=== test_root_section
status = valid
bespon =
  * |'''
    |=== section
    key = value
    |'''/
  * |'''
    |=== section
    key = value
    |===/
    |'''/
  * |'''
    |=== section.subsection
    key = value
    |'''/
  * |'''
    |=== *
    key = value
    |'''/
  * |'''
    |=== section.*
    key = value
    |'''/
json =
  * `{"section": {"key": "value"}}`
  * `{"section": {"key": "value"}}`
  * `{"section": {"subsection": {"key": "value"}}}`
  * `[{"key": "value"}]`
  * `{"section": [{"key": "value"}]}`


|=== test_root_key_path
status = valid
bespon =
  * |'''
    key.subkey = value
    |'''/
  * |'''
    key.subkey.subsubkey = value
    |'''/
  * |'''
    key.* = value
    |'''/
  * |'''
    key.subkey.* = value
    |'''/
json =
  * `{"key": {"subkey": "value"}}`
  * `{"key": {"subkey": {"subsubkey": "value"}}}`
  * `{"key": ["value"]}`
  * `{"key": {"subkey": ["value"]}}`
